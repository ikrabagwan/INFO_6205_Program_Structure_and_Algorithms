"""			
                                Boyer Moore String Algorithm
I am doing a tutorial on the Boyer Moore string algorithm.

Strings matching is an important task in computer science with a wide variety of applications ranging from searching databases to genetics. There are many algorithms to accomplish this task like the naive approach i.e Brute force approach, KMP algorithm, String matching with finite automata, Boyer Moore algorithm. In this article, we will mainly talk about the Boyer Moore algorithm.

Boyer-Moore is an algorithm for finding substrings into strings. This algorithm compares each character of the substring to find a word or the same characters in the string. When characters do not match, the search jumps to the next matching position in the pattern by the value indicated in the Bad Match Table.

Boyer Moore uses a combination of two approaches - Bad character and good character heuristic. Each of them is used independently to search the pattern.

In this algorithm, different arrays are formed for both heuristics by pattern processing, and the best heuristic is used at each step. Boyer Moore starts to match the pattern from the last, which is a different approach from KMP and Naive.

In other words, This algorithm scans the characters of the pattern from right to left beginning with the rightmost character. 
During the testing of the posing placement of pattern P in T, a mismatch is handled as follows: 
=> Let T be the text and P is the pattern that we need to find. 
=> Let us assume that the current character being matched is T[i] = c and the corresponding pattern character is p[j].
=> If c is not contained anywhere in P, then shift the pattern P completely past T[i]. Otherwise, shift P until an occurrence of character c in P gets aligned with T[i]. This technique avoids needless comparisons by shifting the pattern relative to the text.
=> The time complexity for the best case is O(n/m), with m being the length of the pattern. However, the worst-case complexity of this algorithm is O(n*m).


Boyer-Moore is faster, simpler and optimized for the searches of substrings. Boyer-Moore is the best algorithm for string searches.
Usecases for this algorithm are:


Search bars:
    Auto-correctors
    String Analyzers
    Big Data
    Text labelling
    
    
Link for the example  =>  https://colab.research.google.com/drive/1GEWxxQ-hhmDA3oWOaMbeFKKwh4Wjd5qi?usp=sharing
"""
